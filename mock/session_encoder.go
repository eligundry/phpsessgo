// Code generated by MockGen. DO NOT EDIT.
// Source: session_encoder.go

// Package mock is a generated GoMock package.
package mock

import (
	phpencode "github.com/eligundry/phpsessgo/phpencode"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSessionEncoder is a mock of SessionEncoder interface
type MockSessionEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockSessionEncoderMockRecorder
}

// MockSessionEncoderMockRecorder is the mock recorder for MockSessionEncoder
type MockSessionEncoderMockRecorder struct {
	mock *MockSessionEncoder
}

// NewMockSessionEncoder creates a new mock instance
func NewMockSessionEncoder(ctrl *gomock.Controller) *MockSessionEncoder {
	mock := &MockSessionEncoder{ctrl: ctrl}
	mock.recorder = &MockSessionEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionEncoder) EXPECT() *MockSessionEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method
func (m *MockSessionEncoder) Encode(session phpencode.PhpSession) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", session)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode
func (mr *MockSessionEncoderMockRecorder) Encode(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockSessionEncoder)(nil).Encode), session)
}

// Decode mocks base method
func (m *MockSessionEncoder) Decode(raw string) (phpencode.PhpSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", raw)
	ret0, _ := ret[0].(phpencode.PhpSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode
func (mr *MockSessionEncoderMockRecorder) Decode(raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSessionEncoder)(nil).Decode), raw)
}
