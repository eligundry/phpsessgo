// Code generated by MockGen. DO NOT EDIT.
// Source: session_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	phpsessgo "github.com/imantung/phpsessgo"
	http "net/http"
	reflect "reflect"
)

// MockSessionManager is a mock of SessionManager interface
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockSessionManager) Start(w http.ResponseWriter, r *http.Request) phpsessgo.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", w, r)
	ret0, _ := ret[0].(phpsessgo.Session)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSessionManagerMockRecorder) Start(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSessionManager)(nil).Start), w, r)
}
